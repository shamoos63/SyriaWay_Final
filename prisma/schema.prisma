// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CUSTOMER
  HOTEL_OWNER
  CAR_OWNER
  TOUR_GUIDE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Language {
  ENGLISH
  ARABIC
  FRENCH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLATION_REQUESTED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum TourCategory {
  HISTORICAL
  CULTURAL
  NATURE
  ADVENTURE
  CULINARY
}

// Users table with authentication and authorization
model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified DateTime?
  name          String?
  phone         String?
  image         String?
  password      String? // Hashed password for email/password auth
  googleId      String?    @unique // For Google OAuth
  role          UserRole   @default(CUSTOMER)
  status        UserStatus @default(ACTIVE)
  preferredLang Language   @default(ENGLISH)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  accounts     Account[]
  sessions     Session[]
  hotels       Hotel[] // If user is HOTEL_OWNER
  hotelSettings HotelSettings? // If user is HOTEL_OWNER
  cars         Car[] // If user is CAR_OWNER
  tourGuides   TourGuide[] // If user is TOUR_GUIDE
  blogs        Blog[]
  blogReactions BlogReaction[]
  bookings     Booking[]
  reviews      Review[]
  contactForms ContactForm[]
  umrahRequests UmrahRequest[]
  specialTourRequests SpecialTourRequest[]
  notifications Notification[]

  @@map("users")
  @@index([role])
  @@index([status])
  @@index([createdAt])
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Hotels
model Hotel {
  id          String  @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  phone       String?
  email       String?
  website     String?

  // Owner information
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Hotel details
  starRating   Int?    @default(0) // 1-5 stars
  checkInTime  String? @default("14:00")
  checkOutTime String? @default("12:00")

  // Amenities as JSON array
  amenities String? // JSON string for SQLite
  images    String? // JSON string for SQLite

  // Location
  latitude  Float?
  longitude Float?
  googleMapLink String? // Google Maps embed URL

  // Status
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)
  isSpecialOffer Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rooms        Room[]
  bookings     Booking[]
  reviews      Review[]
  translations HotelTranslation[]

  @@map("hotels")
  @@index([ownerId])
  @@index([city])
  @@index([isActive])
  @@index([isVerified])
  @@index([isSpecialOffer])
  @@index([createdAt])
}

// Hotel Settings for owners
model HotelSettings {
  id String @id @default(cuid())
  
  // Owner reference
  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Booking settings
  autoApproveBookings Boolean @default(false)
  maintenanceMode     Boolean @default(false)
  
  // Security settings
  requirePasswordChange Boolean @default(false)
  sessionTimeout        Int     @default(30) // minutes
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hotel_settings")
}

model HotelTranslation {
  id          String   @id @default(cuid())
  hotelId     String
  language    Language
  name        String
  description String?

  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([hotelId, language])
  @@map("hotel_translations")
}

model Room {
  id      String @id @default(cuid())
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  name        String
  roomNumber  String // Room number within the hotel (e.g., "101", "A1", "Suite 1")
  description String?
  roomType    String // "Single", "Double", "Suite", etc.
  capacity    Int // Number of guests
  size        Float? // Room size in square meters

  // Pricing
  pricePerNight Float
  currency      String @default("USD")

  // Room details
  bedType       String? // "Single", "Double", "Queen", "King"
  bedCount      Int     @default(1)
  bathroomCount Int     @default(1)

  // Amenities
  amenities String? // JSON string for SQLite
  images    String? // JSON string for SQLite

  // Availability
  isAvailable  Boolean @default(true)
  maxOccupancy Int     @default(2)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings     Booking[]
  translations RoomTranslation[]

  @@unique([hotelId, roomNumber]) // Ensure unique room numbers within each hotel
  @@map("rooms")
  @@index([hotelId])
  @@index([isAvailable])
  @@index([pricePerNight])
  @@index([roomType])
}

model RoomTranslation {
  id          String   @id @default(cuid())
  roomId      String
  language    Language
  name        String
  description String?

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, language])
  @@map("room_translations")
}

// Cars for rental
model Car {
  id           String @id @default(cuid())
  brand         String // Toyota, Mercedes, etc.
  model        String // Camry, C-Class, etc.
  year         Int
  color        String
  licensePlate String @unique

  // Owner information
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Car details
  category     String // "Economy", "Luxury", "SUV", etc.
  transmission String // "Manual", "Automatic"
  fuelType     String // "Petrol", "Diesel", "Electric"
  seats        Int    @default(5)
  doors        Int    @default(4)

  // Pricing
  pricePerDay Float
  currency    String @default("USD")

  // Features
  features String? // JSON string for SQLite
  images   String? // JSON string for SQLite

  // Location and availability
  currentLocation String?
  isAvailable     Boolean @default(true)
  isVerified      Boolean @default(false)
  isSpecialOffer  Boolean @default(false)

  // Maintenance
  lastServiceDate DateTime?
  nextServiceDate DateTime?
  mileage         Int?      @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings     Booking[]
  reviews      Review[]
  translations CarTranslation[]

  @@map("cars")
  @@index([ownerId])
  @@index([isAvailable])
  @@index([isVerified])
  @@index([isSpecialOffer])
  @@index([category])
  @@index([brand, model])
  @@index([pricePerDay])
}

model CarTranslation {
  id          String   @id @default(cuid())
  carId       String
  language    Language
  description String?

  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId, language])
  @@map("car_translations")
}

// Tour Guides
model TourGuide {
  id          String @id @default(cuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bio         String?
  specialties String? // JSON string for SQLite
  experience  Int     @default(0) // Years of experience
  languages   String? // JSON string for SQLite
  certifications String? // JSON string for SQLite

  // Contact information
  phone       String?
  email       String?
  website     String?

  // Availability
  isAvailable Boolean @default(true)
  isVerified  Boolean @default(false)

  // Pricing
  hourlyRate  Float?
  dailyRate   Float?
  currency    String @default("USD")

  // Media
  profileImage String?
  images       String? // JSON string for SQLite

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tours       Tour[]
  bookings    Booking[]
  reviews     Review[]
  translations TourGuideTranslation[]

  @@map("tour_guides")
  @@index([userId])
  @@index([isAvailable])
  @@index([isVerified])
}

model TourGuideTranslation {
  id          String   @id @default(cuid())
  guideId     String
  language    Language
  bio         String?
  specialties String? // JSON string for SQLite

  guide TourGuide @relation(fields: [guideId], references: [id], onDelete: Cascade)

  @@unique([guideId, language])
  @@map("tour_guide_translations")
}

// Bundles (Package deals)
model Bundle {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Bundle details
  duration  Int // Duration in days
  maxGuests Int @default(2)

  // Pricing
  price         Float
  originalPrice Float? // For showing discounts
  currency      String @default("USD")

  // What's included
  includesHotel Boolean @default(false)
  includesCar   Boolean @default(false)
  includesGuide Boolean @default(false)

  // Bundle services (JSON to store specific service IDs)
  hotelIds String? // JSON string for SQLite
  carIds   String? // JSON string for SQLite
  guideIds String? // JSON string for SQLite

  // Additional details
  itinerary  String?
  inclusions String? // JSON string for SQLite
  exclusions String? // JSON string for SQLite
  images     String? // JSON string for SQLite

  // Status
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings     Booking[]
  translations BundleTranslation[]

  @@map("bundles")
  @@index([isActive])
  @@index([isFeatured])
}

model BundleTranslation {
  id          String   @id @default(cuid())
  bundleId    String
  language    Language
  name        String
  description String?
  itinerary   String?
  inclusions  String? // JSON string for SQLite
  exclusions  String? // JSON string for SQLite

  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@unique([bundleId, language])
  @@map("bundle_translations")
}

// Bookings (unified booking system)
// Enhanced Booking model
model Booking {
  id String @id @default(cuid())

  // Customer information
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Service type and reference
  serviceType          ServiceType // HOTEL, CAR, TOUR, HEALTH, EDUCATIONAL, UMRAH, BUNDLE
  hotelId              String?
  hotel                Hotel?              @relation(fields: [hotelId], references: [id])
  roomId               String?
  room                 Room?               @relation(fields: [roomId], references: [id])
  carId                String?
  car                  Car?                @relation(fields: [carId], references: [id])
  guideId              String?
  guide                TourGuide?          @relation(fields: [guideId], references: [id])
  tourId               String?
  tour                 Tour?               @relation(fields: [tourId], references: [id])
  healthServiceId      String?
  healthService        HealthService?      @relation(fields: [healthServiceId], references: [id])
  educationalProgramId String?
  educationalProgram   EducationalProgram? @relation(fields: [educationalProgramId], references: [id])
  umrahPackageId       String?
  umrahPackage         UmrahPackage?       @relation(fields: [umrahPackageId], references: [id])
  bundleId             String?
  bundle               Bundle?             @relation(fields: [bundleId], references: [id])

  // Booking details
  startDate DateTime
  endDate   DateTime
  guests    Int      @default(1)

  // Pricing
  totalPrice Float
  currency   String @default("USD")

  // Status
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // Additional information
  specialRequests String?
  notes           String?

  // Contact information
  contactName  String?
  contactPhone String?
  contactEmail String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reviews Review[]

  @@map("bookings")
  @@index([userId])
  @@index([serviceType])
  @@index([status])
  @@index([paymentStatus])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  @@index([hotelId])
  @@index([carId])
  @@index([guideId])
  @@index([tourId])
}

enum ServiceType {
  HOTEL
  CAR
  TOUR
  HEALTH
  EDUCATIONAL
  UMRAH
  BUNDLE
}

// Reviews and ratings
model Review {
  id String @id @default(cuid())

  // Review details
  rating      Int // 1-5 stars
  title       String?
  comment     String?
  isApproved  Boolean @default(false)
  isAnonymous Boolean @default(false)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Service being reviewed
  hotelId String?
  hotel   Hotel? @relation(fields: [hotelId], references: [id])

  carId String?
  car   Car?   @relation(fields: [carId], references: [id])

  guideId String?
  guide  TourGuide? @relation(fields: [guideId], references: [id])

  tourId String?
  tour   Tour? @relation(fields: [tourId], references: [id])

  siteId String?
  site   TourismSite? @relation(fields: [siteId], references: [id])

  // Booking reference
  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
  @@index([userId])
  @@index([hotelId])
  @@index([carId])
  @@index([guideId])
  @@index([tourId])
  @@index([siteId])
  @@index([rating])
  @@index([isApproved])
}

// Blog system
model Blog {
  id      String  @id @default(cuid())
  title   String
  excerpt String?
  content String
  slug    String  @unique

  // Author
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Media
  featuredImage String?
  images        String? // JSON string for SQLite

  // SEO and metadata
  metaTitle       String?
  metaDescription String?
  keywords        String?

  // Status
  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Engagement
  likes    Int @default(0)
  dislikes Int @default(0)

  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  translations BlogTranslation[]
  reactions    BlogReaction[]

  @@map("blogs")
  @@index([authorId])
  @@index([isPublished])
  @@index([isFeatured])
  @@index([publishedAt])
  @@index([slug])
}

model BlogTranslation {
  id          String   @id @default(cuid())
  blogId      String
  language    Language
  title       String
  excerpt     String?
  content     String
  metaTitle   String?
  metaDescription String?

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, language])
  @@map("blog_translations")
}

model BlogReaction {
  id     String @id @default(cuid())
  blogId String
  userId String
  reaction String // "LIKE" or "DISLIKE"
  
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([blogId, userId])
  @@map("blog_reactions")
}

// Contact form submissions
model ContactForm {
  id String @id @default(cuid())

  // Contact information
  name    String
  email   String
  phone   String?
  subject String
  message String

  // Optional user association
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Classification
  category String? // "General", "Booking", "Complaint", etc.
  priority String  @default("Normal") // "Low", "Normal", "High", "Urgent"

  // Status
  status     String  @default("New") // "New", "In Progress", "Resolved", "Closed"
  assignedTo String? // Admin user ID who's handling this

  // Response
  response    String?
  respondedAt DateTime?
  respondedBy String? // Admin user ID who responded

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_forms")
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt])
}

// System settings for multi-language and configuration
model SystemSettings {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  description String?
  category    String? // "general", "payment", "email", etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
  @@index([key])
  @@index([category])
}

// Tourism Sites (Historical, Natural, Religious)
model TourismSite {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Site classification
  category    SiteCategory // HISTORICAL, NATURAL, RELIGIOUS
  subcategory String? // "Castle", "Mosque", "Beach", "Mountain", etc.

  // Location
  city        String
  governorate String?
  latitude    Float?
  longitude   Float?

  // Site details
  period       String? // Historical period
  religion     String? // For religious sites
  bestSeason   String? // For natural sites
  entryFee     Float?
  openingHours String?

  // Media
  images        String? // JSON string for SQLite
  featuredImage String?

  // Tips and information
  tips       String? // JSON string for SQLite
  facilities String? // JSON string for SQLite

  // Status
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations TourismSiteTranslation[]
  reviews      Review[]

  @@map("tourism_sites")
  @@index([category])
  @@index([city])
  @@index([isActive])
  @@index([isFeatured])
}

enum SiteCategory {
  HISTORICAL
  NATURAL
  RELIGIOUS
}

model TourismSiteTranslation {
  id          String   @id @default(cuid())
  siteId      String
  language    Language
  name        String
  description String?
  tips        String? // JSON string for SQLite

  site TourismSite @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, language])
  @@map("tourism_site_translations")
}

// Tours (Structured tour packages)
model Tour {
  id          String @id @default(cuid())
  name        String
  description String?

  // Tour details
  category     TourCategory
  duration     Int // Duration in hours
  maxCapacity  Int @default(20)
  minCapacity  Int @default(1)

  // Location
  startLocation String
  endLocation   String
  stops         String? // JSON string for SQLite

  // Pricing
  price    Float
  currency String @default("USD")

  // Schedule
  startTimes String? // JSON string for SQLite
  daysOfWeek String? // JSON string for SQLite

  // Media
  images String? // JSON string for SQLite

  // Status
  isActive Boolean @default(true)

  // Guide
  guideId String?
  guide   TourGuide? @relation(fields: [guideId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings    Booking[]
  reviews     Review[]
  translations TourTranslation[]

  @@map("tours")
  @@index([guideId])
  @@index([category])
  @@index([isActive])
  @@index([startLocation])
  @@index([endLocation])
}

model TourTranslation {
  id          String   @id @default(cuid())
  tourId      String
  language    Language
  name        String
  description String?

  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, language])
  @@map("tour_translations")
}

// Special tour requests (custom tours)
model SpecialTourRequest {
  id          String @id @default(cuid())
  
  // Customer information
  customerId  String
  customer    User   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Request details
  title           String
  description     String
  preferredDates  String? // JSON string for SQLite
  groupSize       Int
  budget          Float?
  specialRequirements String?
  
  // Contact information
  phoneNumber     String?
  alternativeEmail String?
  
  // Status
  status String @default("PENDING") // "PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED"
  adminNotes String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("special_tour_requests")
  @@index([customerId])
  @@index([status])
}

// Health Services
model HealthService {
  id          String @id @default(cuid())
  name        String
  description String?

  // Service details
  category String // "Medical", "Dental", "Wellness", "Emergency"
  duration String // "30 min", "1 hour", etc.
  price    Float
  currency String @default("USD")

  // Provider information
  providerName String
  location     String
  phone        String?
  email        String?

  // Media
  images String? // JSON string for SQLite

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations HealthServiceTranslation[]
  bookings     Booking[]

  @@map("health_services")
  @@index([category])
  @@index([isActive])
}

model HealthServiceTranslation {
  id          String   @id @default(cuid())
  serviceId   String
  language    Language
  name        String
  description String?

  service HealthService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, language])
  @@map("health_service_translations")
}

// Educational Tourism Programs
model EducationalProgram {
  id          String @id @default(cuid())
  name        String
  description String?

  // Program details
  category String // "Language", "Archaeology", "Cooking", "Music", etc.
  duration String // "2 weeks", "1 semester", etc.
  level    String? // "Beginner", "Intermediate", "Advanced"

  // Institution
  institution String
  location    String

  // Pricing
  price    Float
  currency String @default("USD")

  // Schedule
  startDates  String? // JSON string for SQLite
  maxStudents Int?  @default(20)

  // Media
  images String? // JSON string for SQLite

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations EducationalProgramTranslation[]
  bookings     Booking[]

  @@map("educational_programs")
  @@index([category])
  @@index([isActive])
}

model EducationalProgramTranslation {
  id          String   @id @default(cuid())
  programId   String
  language    Language
  name        String
  description String?

  program EducationalProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, language])
  @@map("educational_program_translations")
}

// Umrah Packages
model UmrahPackage {
  id          String @id @default(cuid())
  name        String
  description String?

  // Package details
  duration  Int // Duration in days
  groupSize String // "Up to 20 people", "Families", etc.
  season    String // "Regular", "Ramadan", "Hajj"

  // Pricing
  price    Float
  currency String @default("USD")

  // What's included
  includes String? // JSON string for SQLite

  // Media
  images String? // JSON string for SQLite

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations UmrahPackageTranslation[]
  requests     UmrahRequest[]
  bookings     Booking[]

  @@map("umrah_packages")
  @@index([isActive])
  @@index([season])
}

model UmrahPackageTranslation {
  id          String   @id @default(cuid())
  packageId   String
  language    Language
  name        String
  description String?

  package UmrahPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, language])
  @@map("umrah_package_translations")
}

model UmrahRequest {
  id          String @id @default(cuid())
  
  // Customer information
  customerId  String
  customer    User   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Package information
  packageId   String
  package     UmrahPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  // Request details
  preferredDates     String? // "2024-07-15 to 2024-07-25"
  groupSize          Int     // Number of people
  specialRequirements String? // Any special needs or requests
  message            String? // Additional message from customer
  
  // Contact information
  phoneNumber        String?
  alternativeEmail   String?
  
  // Status
  status String @default("PENDING") // "PENDING", "CONTACTED", "CONFIRMED", "CANCELLED"
  adminNotes String? // Notes from admin
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("umrah_requests")
  @@index([customerId])
  @@index([packageId])
  @@index([status])
}

// Tourism News
model TourismNews {
  id      String  @id @default(cuid())
  title   String
  content String
  excerpt String?

  // Media
  featuredImage String?
  images        String? // JSON string for SQLite

  // Categorization
  category String? // "General", "Events", "Announcements"
  tags     String? // JSON string for SQLite

  // Status
  isPublished Boolean @default(false)
  isFeatured  Boolean @default(false)

  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  translations TourismNewsTranslation[]

  @@map("tourism_news")
  @@index([isPublished])
  @@index([isFeatured])
  @@index([publishedAt])
}

model TourismNewsTranslation {
  id       String   @id @default(cuid())
  newsId   String
  language Language
  title    String
  content  String
  excerpt  String?

  news TourismNews @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@unique([newsId, language])
  @@map("tourism_news_translations")
}

// Special Offers
model Offer {
  id          String @id @default(cuid())
  title       String
  description String?

  // Offer details
  discountPercentage Int // 10, 20, 30, etc.
  validFrom          DateTime
  validUntil         DateTime
  maxUses            Int? // null for unlimited

  // Applicable services
  appliesToHotels    Boolean @default(false)
  appliesToCars      Boolean @default(false)
  appliesToTours     Boolean @default(false)
  appliesToBundles   Boolean @default(false)

  // Media
  images String? // JSON string for SQLite

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  translations OfferTranslation[]

  @@map("offers")
  @@index([isActive])
  @@index([validFrom])
  @@index([validUntil])
}

model OfferTranslation {
  id          String   @id @default(cuid())
  offerId     String
  language    Language
  title       String
  description String?

  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@unique([offerId, language])
  @@map("offer_translations")
}

// Notifications
model Notification {
  id          String @id @default(cuid())
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  message     String
  type        String // "info", "success", "warning", "error"
  isRead      Boolean @default(false)
  actionUrl   String? // URL to navigate to when clicked

  // Timestamps
  createdAt DateTime @default(now())
  readAt    DateTime?

  @@map("notifications")
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// Website Settings
model WebsiteSettings {
  id          String   @id @default(cuid())
  
  // Website Information
  siteName    String   @default("Syria Ways")
  siteDescription String?
  logoUrl     String?
  faviconUrl  String?
  
  // Contact Information
  contactEmail String?
  contactPhone String?
  contactAddress String?
  googleMapsEmbed String?
  
  // Social Media Links
  facebookUrl String?
  instagramUrl String?
  twitterUrl  String?
  websiteUrl  String?
  youtubeUrl  String?
  linkedinUrl String?
  
  // Contact Form Settings
  enableContactForm Boolean @default(true)
  recipientEmail   String?
  autoReplyMessage String?
  enableRecaptcha  Boolean @default(true)
  
  // Social Sharing Settings
  enableSocialSharing Boolean @default(true)
  shareFacebook       Boolean @default(true)
  shareTwitter        Boolean @default(true)
  shareInstagram      Boolean @default(false)
  shareWhatsapp       Boolean @default(true)
  
  // SEO Settings
  metaTitle       String?
  metaDescription String?
  keywords        String?
  generateSitemap Boolean @default(true)
  enableRobotsTxt Boolean @default(true)
  
  // Analytics
  googleAnalyticsId String?
  enableAnalytics   Boolean @default(true)
  enableCookieConsent Boolean @default(true)
  
  // Localization
  defaultLanguage String @default("ENGLISH")
  timezone        String @default("Asia/Damascus")
  dateFormat      String @default("DD/MM/YYYY")
  currency        String @default("USD")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("website_settings")
}
